---
import { info } from "@data";
import Layout from "@layouts/Layout.astro";
import Hero from "@components/home/Hero.astro";
import Experience from "@components/home/Experience.astro";
import ProjectsWrapper from "@components/general/ProjectsWrapper.astro";
import MetaHead from "@components/general/MetaHead.astro";
import Paragraph from "@components/general/Paragraph.astro";
import AboutMe from "@components/general/AboutMe.astro";
import Technical from "@components/general/Technical.astro";

const featureProjects = info.projects.map((project, index) => {
  if (project.isFeatured && index < 6) {
    return project;
  }
});
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <MetaHead
      title={"Portfolio"}
      description={info.about}
      ogImageUrl={"/assets/images/profile.png"}
    />
  </head>
  <body>
    <Layout>
      <canvas
        id="sky-matrix"
        class="fixed -z-10 top-0 left-0 opacity-20 block dark:hidden"></canvas>
      <canvas
        id="emerald-matrix"
        class="fixed -z-10 top-0 left-0 opacity-20 hidden dark:block"></canvas>
      <Hero />
      <AboutMe />
      <Experience title={"WORK"} details={info.experience} />
      <Experience title={"EDUCATION"} details={info.education} />
      <Technical />
      <section>
        <h2 class="dark:text-light mt-32">FEATURE PROJECTS</h2>
        <ProjectsWrapper projects={featureProjects} />
      </section>
    </Layout>
    <script>
      //chinese characters - taken from the unicode charset
      const matrixStr =
        "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789$+-*/=%\"'#&_(),.:;?!\\|{}<>[]^~";
      //converting the string into an array of single characters
      const matrix = matrixStr.split("");
      const font_size = 16;
      // geting canvas by Boujjou Achraf
      const lc: HTMLCanvasElement = document.getElementById(
        "sky-matrix"
      ) as HTMLCanvasElement;
      const lctx = lc.getContext("2d");

      //making the canvas full screen
      lc.height = window.innerHeight;
      lc.width = window.innerWidth;

      const lcolumns = lc.width / font_size; //number of columns for the rain
      //an array of drops - one per column
      const ldrops = [];
      //x below is the x coordinate
      //1 = y co-ordinate of the drop(same for every drop initially)
      for (let x = 0; x < lcolumns; x++) ldrops[x] = 1;

      const dc = document.getElementById("emerald-matrix") as HTMLCanvasElement;
      const dctx = dc.getContext("2d");

      //making the canvas full screen
      dc.height = window.innerHeight;
      dc.width = window.innerWidth;

      const dcolumns = dc.width / font_size; //number of columns for the rain
      //an array of drops - one per column
      const ddrops = [];
      //x below is the x coordinate
      //1 = y co-ordinate of the drop(same for every drop initially)
      for (let x = 0; x < dcolumns; x++) ddrops[x] = 1;

      //drawing the characters
      function draw({ c, ctx, theme, drops }) {
        //Black BG for the canvas
        //translucent BG to show trail
        ctx.fillStyle =
          theme === "dark"
            ? "rgba(23, 23, 23, 0.04)"
            : "rgba(255, 255, 255, 0.04)";

        ctx.fillRect(0, 0, c.width, c.height);

        ctx.fillStyle = theme === "dark" ? "#34d399" : "#0369a1"; //green text
        ctx.font = font_size + "px Matrix";
        //looping over drops
        for (let i = 0; i < drops.length; i++) {
          //a random chinese character to print
          const text = matrix[Math.floor(Math.random() * matrix.length)];
          //x = i*font_size, y = value of drops[i]*font_size
          ctx.fillText(text, i * font_size, drops[i] * font_size);

          //sending the drop back to the top randomly after it has crossed the screen
          //adding a randomness to the reset to make the drops scattered on the Y axis
          if (drops[i] * font_size > c.height && Math.random() > 0.975)
            drops[i] = 0;

          //incrementing Y coordinate
          drops[i]++;
        }
      }

      setInterval(
        () => draw({ c: dc, ctx: dctx, theme: "dark", drops: ddrops }),
        35
      );
      setInterval(
        () => draw({ c: lc, ctx: lctx, theme: "light", drops: ldrops }),
        35
      );
    </script>
  </body>
</html>
